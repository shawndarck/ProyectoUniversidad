// test/smock.test.js
const { smock } = require('@defi-wonderland/smock');
const { expect } = require('chai');
const { ethers } = require('hardhat');

describe('SimpleBank', function () {
  let bank;
  let user;
  let mockContract;

  before(async () => {
    [user] = await ethers.getSigners();
    
    // Desplegamos el contrato original
    const SimpleBank = await ethers.getContractFactory('SimpleBank');
    bank = await SimpleBank.deploy();
    await bank.deployed();

    // Creamos un mock del contrato
    const SimpleBankMock = await smock.mock('SimpleBank');
    mockContract = await SimpleBankMock.deploy();
    await mockContract.deployed();
  });

  it('should allow deposits', async function () {
    // Simulamos la llamada al contrato para un depósito
    await expect(() => bank.connect(user).deposit({ value: ethers.utils.parseEther('1.0') }))
      .to.changeEtherBalance(bank, ethers.utils.parseEther('1.0'));
    
    const balance = await bank.balances(user.address);
    expect(balance).to.equal(ethers.utils.parseEther('1.0'));
  });

  it('should allow withdrawals', async function () {
    // Hacemos un depósito inicial
    await bank.connect(user).deposit({ value: ethers.utils.parseEther('1.0') });

    // Simulamos la llamada al contrato para un retiro
    await expect(() => bank.connect(user).withdraw(ethers.utils.parseEther('0.5')))
      .to.changeEtherBalance(bank, ethers.utils.parseEther('-0.5'));
    
    const balance = await bank.balances(user.address);
    expect(balance).to.equal(ethers.utils.parseEther('0.5'));
  });

  it('should fail withdraw with insufficient funds', async function () {
    // Simulamos el retiro con fondos insuficientes y verificamos que falla
    await expect(bank.connect(user).withdraw(ethers.utils.parseEther('2.0')))
      .to.be.revertedWith('Insufficient funds');
  });

  it('should handle mock interactions', async function () {
    // Mockeamos el comportamiento del contrato
    mockContract.balances.whenCalledWith(user.address).returns(ethers.utils.parseEther('5.0'));

    const balance = await mockContract.balances(user.address);
    expect(balance).to.equal(ethers.utils.parseEther('5.0'));

    // Probamos el retiro usando el mock
    await mockContract.connect(user).withdraw(ethers.utils.parseEther('1.0'));
    expect(await mockContract.balances(user.address)).to.equal(ethers.utils.parseEther('4.0'));
  });
});

